name: Build and Deploy to EC2
on:
  push:
    branches:
      - main
    paths:
      - '*/src/*'
      - '.github/workflows/**.yml'

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY || 'catalog-service' }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  CONTAINER_NAME: catalog-service
  EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
  PROFILES_ACTIVE: ${{ secrets.PROFILES_ACTIVE || 'dev' }}
  DB_URL: ${{ secrets.DB_URL }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}

jobs:
  deploy-to-ec2:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ secrets.AWS_ROLE_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to EC2 using SSM
        id: deploy
        run: |
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ env.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "#!/bin/bash",
              "# Login to ECR",
              "aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com",
              "# Pull the latest image",
              "docker pull ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest",
              "# Stop and remove the old container if it exists",
              "docker stop ${{ env.CONTAINER_NAME }} || true",
              "docker rm ${{ env.CONTAINER_NAME }} || true",
              "# Run the new container",
              "docker run -d --name ${{ env.CONTAINER_NAME }} --restart always -p 8085:8085 -e SPRING_PROFILES_ACTIVE=${{ env.PROFILES_ACTIVE }} -e DB_URL=${{ env.DB_URL }} -e DB_USERNAME=${{ env.DB_USERNAME }} -e DB_PASSWORD=${{ env.DB_PASSWORD }} ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:latest",
              "# Clean up unused images",
              "docker system prune -af"
            ]' \
            --comment "Deploy latest container version" \
            --query "Command.CommandId" \
            --output text)
          echo "COMMAND_ID=$COMMAND_ID" >> $GITHUB_OUTPUT

      - name: Verify deployment
        run: |
          aws ssm get-command-invocation \
            --command-id "${{ steps.deploy.outputs.COMMAND_ID }}" \
            --instance-id "${{ env.EC2_INSTANCE_ID }}" \
            --query "Status"